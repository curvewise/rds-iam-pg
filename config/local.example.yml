# To use a local PostgreSQL database on OS X (Homebrew):
# databaseUrl: postgresql://localhost:5432/goldie

# To use a local PostgreSQL database on Fedora:
# databaseUrl: postgresql://postgres:postgres@localhost:5432/goldie

# To use the sandbox Postgres database, copy the `DATABASE_URL` from
# https://dashboard.heroku.com/apps/goldie-data-layer-sandbox/settings
# databaseUrl: postgres://...:...@ec2-54-224-175-142.compute-1.amazonaws.com:5432/d98vu87n8bq42e

# This is optional. When you set up the AWS CLI for local development, it will
# create a profile, and store it in ~/.aws/credentials. This includes the
# aws_access_key_id and aws_secret_access_key of your IAM user. You can have
# multiple profiles stored in ~/.aws/credentials.  If you only have one
# profile, you do not need this variable - it will use the profile you set up
# as the default credentials for your AWS config.  If you have more than one
# profile set up (e.g. a personal AWS account, and an account for curvewise),
# then you can set the awsProfile config variable, and it will use the
# credentials in that profile for your AWS config. This is the same as
# using the --profile flag in the AWS CLI.
# For further information, see: https://aws.amazon.com/cli/
# awsProfile: curvewise

# To test authentication locally, generate a shared secret using
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
# and uncomment this block.
#
# auth:
#   enabled: true
#   sharedSecret: '...'

# To test bucket permissions, you must create a profile for each account you
# want to test. For each one, create additional entries in ~/.aws/credentials
# with the appropriate access keys. You can use your personal developer
# credentials as the `developer_test_user` or the `admin_test_user`. Then add
# a block like this:
#
# test:
#   iamUserProfilesAvailable:
#     - developer_test_user
#
# The complete list of testable profiles is listed in
# `bucket-authorization.test.ts`.

# deploymentEnvironment: test-custom123

